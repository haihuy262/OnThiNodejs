<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Bootstrap Example</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  </head>
  <body>
    <div class="container mt-3">
      <h2 class="text-center">Danh sách xe máy</h2>
      <div class="mb-3">
        <input
          type="text"
          id="searchInput"
          class="form-control"
          placeholder="Tìm kiếm..."
        />
      </div>
      <table class="table mt-3" id="xeMayTable">
        <thead class="table-dark">
          <tr>
            <th>Tên xe</th>
            <th>Hãng sản xuất</th>
            <th>Ảnh xe máy</th>
            <th>Giá tiền</th>
            <th>Xoá</th>
            <th>Sửa</th>
          </tr>
        </thead>
        <tbody id="productTableBody"></tbody>
      </table>
    </div>
    <div
      class="modal fade"
      id="productModal"
      tabindex="-1"
      aria-labelledby="productModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="productModalLabel">
              Chi tiết sản phẩm
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body" id="productDetails">
            <!-- Product details will be displayed here -->
          </div>
        </div>
      </div>
    </div>
    <script>
      const searchInput = document.getElementById("searchInput");
      searchInput.addEventListener("input", () => {
        // Gọi hàm filterTable để lọc dữ liệu khi có sự thay đổi trong ô tìm kiếm
        filterTable(searchInput.value.trim());
      });

      // Hàm để lọc dữ liệu và cập nhật bảng
      function filterTable(searchTerm) {
        // Lấy danh sách sản phẩm từ thẻ tbody
        const tableBody = document.getElementById("productTableBody");
        const rows = tableBody.getElementsByTagName("tr");

        // Duyệt qua từng dòng và ẩn/hiện dựa trên kết quả tìm kiếm
        for (let i = 0; i < rows.length; i++) {
          const row = rows[i];
          const productName = row
            .getElementsByTagName("td")[0]
            .innerText.toLowerCase();
          const manufacturer = row
            .getElementsByTagName("td")[1]
            .innerText.toLowerCase();
          // Kiểm tra xem từ khóa tìm kiếm xuất hiện trong tên sản phẩm hoặc hãng sản xuất
          const isMatch =
            productName.includes(searchTerm.toLowerCase()) ||
            manufacturer.includes(searchTerm.toLowerCase());
          // Hiển thị hoặc ẩn dựa trên kết quả kiểm tra
          row.style.display = isMatch ? "" : "none";
        }
      }

      // Khi trang web đã tải xong (DOMContentLoaded), thực hiện hàm này
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          // Gửi yêu cầu GET đến endpoint "/api/danhSachXeMay/xemay"
          const response = await fetch("/api/danhSachXeMay/xemay", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });
          // Nếu yêu cầu không thành công, ném lỗi và kết thúc
          if (!response.ok) {
            throw new Error(`Lỗi HTTP! Trạng thái: ${response.status}`);
          }
          // Chuyển đổi dữ liệu nhận được thành đối tượng JSON
          const data = await response.json();
          // Gọi hàm populateTable để hiển thị dữ liệu lên bảng
          populateTable(data);
        } catch (error) {
          // Bắt lỗi nếu có lỗi trong quá trình lấy dữ liệu
          console.error("Lỗi khi lấy dữ liệu:", error);
        }

        function showProductDetails(product, avatarHTML) {
          const productDetailsContainer =
            document.getElementById("productDetails");
          // Customize this section to display the product details as per your requirement
          productDetailsContainer.innerHTML = `
          <p><strong>Tên xe:</strong> ${product.tenXeMay}</p>
          <p><strong>Hãng sản xuất:</strong> ${product.hangSanXuat}</p>
          <p><strong>Ảnh xe máy:</strong> ${avatarHTML}</p>
          <p><strong>Giá tiền:</strong> ${product.giaTien}</p>
          <!-- Add more details as needed -->
        `;
        }

        function showProductDetailsOnClick(product, avatarHTML) {
          // Show the modal
          const productModal = new bootstrap.Modal(
            document.getElementById("productModal")
          );
          productModal.show();

          // Populate modal with product details
          showProductDetails(product, avatarHTML);
        }

        // Hàm để điền dữ liệu vào bảng HTML
        function populateTable(data) {
          // Lấy thẻ tbody của bảng theo ID "productTableBody"
          const tableBody = document.getElementById("productTableBody");
          // Duyệt qua từng sản phẩm trong dữ liệu
          data.forEach((product) => {
            // Tạo một dòng mới trong bảng
            const row = document.createElement("tr");
            row.addEventListener("click", () => {
              // Call the function to show product details
              showProductDetailsOnClick(product, avatarHTML);
            });
            // Biến để lưu HTML của ảnh (avatar)
            let avatarHTML = "";
            // Kiểm tra nếu avatar là một mảng (nhiều ảnh)
            if (Array.isArray(product.anhXeMay)) {
              // Duyệt qua từng ảnh và thêm vào biến avatarHTML
              product.anhXeMay.forEach((image) => {
                avatarHTML += `<img src="/images/${image}" style="width: 50px; height: 50px; margin-left: 5px;">`;
              });
            } else {
              // Nếu avatar là một chuỗi (một ảnh)
              avatarHTML = `<img src="/images/${product.anhXeMay}" style="width: 50px; height: 50px; margin-left: 5px;">`;
            }
            // Điền thông tin sản phẩm vào dòng
            row.innerHTML = `
                <td>${product.tenXeMay}</td>
                <td>${product.hangSanXuat}</td>
                <td>${avatarHTML}</td>
                <td>${product.giaTien}</td>
                <td>
                <button onclick="deleteProduct('${product._id}')" style="color: red;">Xoá</button>
                </td>
                <td>
                <button onclick="editProduct('${product._id}')" style="color: blue;">Sửa</button>
                </td>
            `;
            // Thêm dòng vào tbody của bảng
            tableBody.appendChild(row);
          });
        }
      });

      function deleteProduct(productId) {
        if (confirm("Bạn có muốn xoá sản phẩm này?")) {
          fetch(`/delete/${productId}`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
          })
            .then((response) => {
              if (response.ok) {
                alert("Xoá thành công!");
                // Reload the page or update the product list
                window.location.reload();
              } else {
                alert("Xoá thất bại!");
              }
            })
            .catch((error) => {
              console.error("Error deleting product:", error);
            });
        }
      }

      function editProduct(productId) {
        // Chuyển hướng người dùng đến trang sửa với id tương ứng
        window.location.href = `/api/edit/${productId}`;
      }
    </script>
  </body>
</html>
